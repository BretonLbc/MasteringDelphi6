{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f5\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Helvetica;}
{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}{\f119\fnil\fcharset77\fprq2{\*\panose 00000000000000000000}Zapf Dingbats{\*\falt Monotype Sorts};}{\f120\froman\fcharset238\fprq2 Times New Roman CE;}
{\f121\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f123\froman\fcharset161\fprq2 Times New Roman Greek;}{\f124\froman\fcharset162\fprq2 Times New Roman Tur;}{\f125\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f126\fswiss\fcharset238\fprq2 Arial CE;}{\f127\fswiss\fcharset204\fprq2 Arial Cyr;}{\f129\fswiss\fcharset161\fprq2 Arial Greek;}{\f130\fswiss\fcharset162\fprq2 Arial Tur;}{\f131\fswiss\fcharset186\fprq2 Arial Baltic;}
{\f132\fmodern\fcharset238\fprq1 Courier New CE;}{\f133\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f135\fmodern\fcharset161\fprq1 Courier New Greek;}{\f136\fmodern\fcharset162\fprq1 Courier New Tur;}{\f137\fmodern\fcharset186\fprq1 Courier New Baltic;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;
\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\*\listtable
{\list\listtemplateid-1\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}}{\listname ;}\listid-2}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel
\listoverrideformat{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat0\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 }}\ls1}}{\info{\title The RichBar Example}{\author Marco Cant\'f9}
{\operator Marco Cant\'f9}{\creatim\yr2001\mo5\dy7\hr11\min32}{\revtim\yr2001\mo5\dy7\hr11\min32}{\version2}{\edmins1}{\nofpages4}{\nofwords1297}{\nofchars7398}{\*\company Wintech Italia Srl}{\nofcharsws9085}{\vern113}}
\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3
\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}
{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\adjustright 
\fs20\cgrid {\b\f1\fs36\cf6\cgrid0 The RichBar Example
\par 
\par }\pard \nowidctlpar\adjustright {\b\f1\cf6\cgrid0 
An introduction to the basic features of the RichBar example, discussed in Chapter 7 of the book "Mastering Delphi 6" and of the follow-up MdEdit example discussed in Chapter 8. Written and copyrighted by Marco Cant\'f9.}{\b\f1\cgrid0 
\par }{\fs22\cgrid0 
\par This document ex
plains how do you create a simple editor based on the RichEdit control, using Delphi 6. The program has a toolbar and implements a number of features, including a complete scheme for opening and saving the text files, discussed in this document. In fact, 
we want to be able to ask the user to save any modified file before opening a new one, to avoid losing any changes. Sounds like a professional application, doesn't it?
\par 
\par }{\b\f1\fs28\cgrid0 File Operations
\par }{\fs22\cgrid0 
\par The most complex part of this program is implementing the commands of the File pull-down menu\emdash 
New, Open, Save, and Save As. In each case, we need to track whether the current file has changed, saving the file only if it has. We should prompt the user to save the file each time the program creates a new file, loads an existing one, or terminates.

\par To accomplish this, I've added a field, a property, and three public methods to the class describing the form of the application:
\par }{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 private
\par }{\f2\fs18\cgrid0     FModified: Boolean;
\par     FileName: string;
\par     procedure SetModified(const Value: Boolean);
\par     property Modified: Boolean read FModified write SetModified;
\par }{\b\f2\fs18\cgrid0   public
\par }{\f2\fs18\cgrid0     function SaveChanges: Boolean;
\par     function Save: Boolean;
\par     function SaveAs: Boolean;
\par }{\fs22\cgrid0 
\par The }{\f2\fs22\cgrid0 FileName}{\fs22\cgrid0  string and the }{\f2\fs22\cgrid0 Modified}{\fs22\cgrid0  property are set when the form is created, by exec
uting the code used to define a new file. These vales are later changed when a new file is loaded or the user renames a file with the Save As command. Here is the startup code:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.FormCreate(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   Application.Title := Caption;
\par   NewExecute (}{\b\f2\fs18\cgrid0 Self}{\f2\fs18\cgrid0 );
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The value of the flag changes as soon as you type new characters in the RichEdit control (in its }{\f2\fs22\cgrid0 OnChange}{\fs22\cgrid0  event handler):
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.RichEdit1Change(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\i\f2\fs18\cgrid0 // enables save operations
\par }{\f2\fs18\cgrid0   Modified := True;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par When a new file is created, the program checks whether the text has been modified. If so, it calls the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function, which asks the user whether to save the changes, discard them, or skip the current operation:

\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.New1Click(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0     RichEdit1.Text := '';
\par     Modified := False;
\par     FileName := '';
\par     Caption := 'RichNote - [Untitled]';
\par   }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par If the creation of a new file is confirmed, some simple operations take place, including using }{\i\fs22\cgrid0 'Untitled'}{\fs22\cgrid0  instead of the file name in the form's caption.
\par 
\par {\pntext\pard\plain\f3\fs22 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\b\f1\fs22\cgrid0 Note: Short-Circuit Evaluation. }{\f1\fs22\cgrid0 
The expression }{\f2\fs22\cgrid0 if not Modified or SaveChanges then}{\i\f1\fs22\cgrid0  }{\f1\fs22\cgrid0 requires some explanation. By default, Pascal performs wha
t is called "short-circuit evaluation" of complex conditional expressions. The idea is simple: if the expression }{\f2\fs22\cgrid0 not Modified}{\f1\fs22\cgrid0 
 is true, we are sure that the whole expression is going to be true, and we don't need to evaluate the second expression. In this particular case, the second expression is a function call, and the function is called only if }{\f2\fs22\cgrid0 Modified}{
\f1\fs22\cgrid0  is }{\f2\fs22\cgrid0 True}{\f1\fs22\cgrid0 . This behavior of }{\f2\fs22\cgrid0 or}{\f1\fs22\cgrid0  and }{\f2\fs22\cgrid0 and}{\f1\fs22\cgrid0 
 expressions can be changed by setting a Delphi compiler option called Complete Boolean Eval. You can find it on the Compiler page of the Project Options dialog box.
\par }\pard \nowidctlpar{\*\pn \pnlvlcont\ilvl0\ls0\pnrnot0\pndec }\adjustright {\fs22\cgrid0 
\par The message box displayed by the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function has three options. If the user selects the Cancel button, the function returns }{\f2\fs22\cgrid0 False}{\fs22\cgrid0 
. If the user selects No, nothing happens (the file is not saved) and the function returns }{\f2\fs22\cgrid0 True}{\fs22\cgrid0 
, to indicate that although we haven't actually saved the file, the requested operation (such as creating a new file) can be accomplished. If the user selects Yes, the file is saved and the function returns }{\f2\fs22\cgrid0 True}{\fs22\cgrid0 .
\par In the code of this function, notice in particular the call to the }{\f2\fs22\cgrid0 MessageDlg}{\fs22\cgrid0  function used as the value of a }{\f2\fs22\cgrid0 case}{\fs22\cgrid0  statement:
\par }{\b\f2\fs18\cgrid0 
\par function }{\f2\fs18\cgrid0 TFormRichNote.SaveChanges: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 case}{\f2\fs18\cgrid0  MessageDlg (
\par     }{\i\f2\fs18\cgrid0 'The document '}{\f2\fs18\cgrid0  + filename + }{\i\f2\fs18\cgrid0 ' has changed.'}{\f2\fs18\cgrid0  +
\par     #13#13 + }{\i\f2\fs18\cgrid0 'Do you want to save the changes?'}{\f2\fs18\cgrid0 ,
\par     mtConfirmation, mbYesNoCancel, 0) }{\b\f2\fs18\cgrid0 of}{\f2\fs18\cgrid0 
\par   idYes:
\par }{\i\f2\fs18\cgrid0     // call Save and return its result
\par }{\f2\fs18\cgrid0     Result := Save;
\par   idNo:
\par }{\i\f2\fs18\cgrid0     // don't save and continue
\par }{\f2\fs18\cgrid0     Result := True;
\par   }{\b\f2\fs18\cgrid0 else}{\f2\fs18\cgrid0  }{\i\f2\fs18\cgrid0 // idCancel:}{\f2\fs18\cgrid0 
\par }{\i\f2\fs18\cgrid0     // don't save and abort operation
\par }{\f2\fs18\cgrid0     Result := False;
\par   }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par {\pntext\pard\plain\f3\fs22 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \fi-360\li360\nowidctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnindent360 {\pntxtb \'b7}}\ls1\adjustright {\b\f1\fs22\cgrid0 Note}{\f1\fs22\cgrid0 
: In the MessageDlg call above, I've added explicit newline characters (}{\f2\fs22\cgrid0 #13}{\f1\fs22\cgrid0 ) to improve the readability of the output. As an alternative to using a numeric character constant, you can call }{\f2\fs22\cgrid0 Chr(13)}{
\f1\fs22\cgrid0 .}{\f5\fs24\cgrid0 
\par }\pard \nowidctlpar\adjustright {\fs22\cgrid0 
\par To actually save the file, another function is invoked: }{\f2\fs22\cgrid0 Save}{\fs22\cgrid0 . This method saves the file if it already has a proper file name or asks the user to enter a name, calling the }{\f2\fs22\cgrid0 SaveAs}{\fs22\cgrid0 
 functions. These are two more internal functions, not directly connected with menu items:
\par 
\par }{\b\f2\fs18\cgrid0 function}{\f2\fs18\cgrid0  TFormRichNote.Save: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  Filename = }{\i\f2\fs18\cgrid0 ''}{\f2\fs18\cgrid0  }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     Result := SaveAs }{\i\f2\fs18\cgrid0 // ask for a file name}{\f2\fs18\cgrid0 
\par }{\b\f2\fs18\cgrid0   else
\par   begin
\par }{\f2\fs18\cgrid0     RichEdit1.Lines.SaveToFile (FileName);
\par     Modified := False;
\par     Result := True;
\par }{\b\f2\fs18\cgrid0   end;
\par end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f2\fs18\cgrid0 function }{\f2\fs18\cgrid0 TFormRichNote.SaveAs: Boolean;
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   SaveDialog1.FileName := Filename;
\par   }{\b\f2\fs18\cgrid0 if}{\f2\fs18\cgrid0  SaveDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par   }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0     Filename := SaveDialog1.FileName;
\par     Save;
\par     Caption := }{\i\f2\fs18\cgrid0 'RichNote - '}{\f2\fs18\cgrid0  + Filename;
\par     Result := True;
\par   }{\b\f2\fs18\cgrid0 end
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 else
\par }{\f2\fs18\cgrid0     Result := False;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par I use two functions to perf
orm the Save and SaveAs operations for completeness, even if the RichBar program has only a save button, and not a Save As button. The MdEdit version in Chapter 8 will offer this extra feature. Moreover, the save button is enabled only if the file has not
 been modified, as indicated in the }{\f2\fs22\cgrid0 SetModified}{\fs22\cgrid0  method:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.SetModified(}{\b\f2\fs18\cgrid0 const}{\f2\fs18\cgrid0  Value: Boolean);}{\b\f2\fs18\cgrid0 
\par begin
\par }{\f2\fs18\cgrid0   FModified := Value;
\par   tbtnSave.Enabled := Modified;
\par }{\b\f2\fs18\cgrid0 end;
\par }{\fs22\cgrid0 
\par Opening a file is much simpler. Before loading a new file, the program checks whether the current file has changed, asking the user to save it with the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function, as before. The }{\f2\fs22\cgrid0 OpenExecute}{
\fs22\cgrid0  method is based on the OpenDialog component, another default dialog box provided by Windows and supported by Delphi:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.OpenExecute(Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   }{\b\f2\fs18\cgrid0 if not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 if }{\f2\fs18\cgrid0 OpenDialog1.Execute }{\b\f2\fs18\cgrid0 then}{\f2\fs18\cgrid0 
\par     }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0       Filename := OpenDialog1.FileName;
\par       RichEdit1.Lines.LoadFromFile (FileName);
\par       Modified := False;
\par       Caption := }{\i\f2\fs18\cgrid0 'RichNote - '}{\f2\fs18\cgrid0  + FileName;
\par     }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The only other detail related to file operations is that both the OpenDialog and SaveDialog components of the form have a particular value for their }{\f2\fs22\cgrid0 Filter}{\fs22\cgrid0  and }{\f2\fs22\cgrid0 DefaultExt}{\fs22\cgrid0 
 properties, as you can see in the following fragment from the textual description of the form:
\par }{\b\f2\fs18\cgrid0 
\par object }{\f2\fs18\cgrid0 OpenDialog1: TOpenDialog
\par   DefaultExt = }{\i\f2\fs18\cgrid0 'rtf'}{\f2\fs18\cgrid0 
\par   FileEditStyle = fsEdit
\par   Filter = }{\i\f2\fs18\cgrid0 'Rich Text File (*.rtf)|*.rtf|Any file (*.*)|*.*'}{\f2\fs18\cgrid0 
\par   Options = [ofHideReadOnly, ofPathMustExist,ofFileMustExist]
\par }{\b\f2\fs18\cgrid0 end
\par }{\fs22\cgrid0 
\par The string used for the }{\f2\fs22\cgrid0 Filter}{\fs22\cgrid0  property contains four pairs of substrings, separated by the }{\f2\fs22\cgrid0 |}{\fs22\cgrid0 
 symbol. Each pair has a description of the type of file that will appear in the File Open or File Save dialog box, and the filter to be applied to the files in the directory, such as }{\f2\fs22\cgrid0 *.RTF}{\fs22\cgrid0 
. To set the filters in Delphi, you can simply invoke the editor of this property, which displays a list with two columns.
\par The file-related methods above are also called from the }{\f2\fs22\cgrid0 FormCloseQuery}{\fs22\cgrid0  method (the handler of the }{\f2\fs22\cgrid0 OnCloseQuery}{\fs22\cgrid0 
 event), which is called each time the user tries to close the form, terminating the program. We can make this happen in various ways\emdash 
by double-clicking on the system menu icon, selecting the system menu's Close command, pressing the Alt+F4 keys, or calling the }{\f2\fs22\cgrid0 Close}{\fs22\cgrid0  method in the code, as in the File }{\f14\fs22\cgrid0 \'d8}{\f119\fs22\cgrid0  }{
\fs22\cgrid0 Exit menu command.
\par In }{\f2\fs22\cgrid0 FormCloseQuery}{\fs22\cgrid0 , you can decide whether or not to actually close the application by setting the }{\f2\fs22\cgrid0 CanClose}{\fs22\cgrid0  parameter, which is passed by reference. Again, if the current file has bee
n modified, we call the }{\f2\fs22\cgrid0 SaveChanges}{\fs22\cgrid0  function and use its return value. Again we can use the short-circuit evaluation technique:
\par }{\b\f2\fs18\cgrid0 
\par procedure}{\f2\fs18\cgrid0  TFormRichNote.FormCloseQuery(Sender: TObject;
\par   }{\b\f2\fs18\cgrid0 var }{\f2\fs18\cgrid0 CanClose: Boolean);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   CanClose := }{\b\f2\fs18\cgrid0 not }{\f2\fs18\cgrid0 Modified }{\b\f2\fs18\cgrid0 or }{\f2\fs18\cgrid0 SaveChanges;
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par }{\fs22\cgrid0 
\par The last file-related command is the Print command. The RichEdit component includes print capabilities and they are very simple to use. Here is the code, which actually produces a very nice printout:
\par }{\b\f2\fs18\cgrid0 
\par procedure }{\f2\fs18\cgrid0 TFormRichNote.PrintExecute (Sender: TObject);
\par }{\b\f2\fs18\cgrid0 begin
\par }{\f2\fs18\cgrid0   RichEdit1.Print (FileName);
\par }{\b\f2\fs18\cgrid0 end}{\f2\fs18\cgrid0 ;
\par 
\par }{\b\f1\fs28\cgrid0 Conclusion
\par }{\fs22\cgrid0 
\par As mentioned at the beginning, the file support provided by this example is rather complex. This is something you'll probably need to handle in any file-related application. As this was too long for inclusion in the printed "Mastering Delphi 6
," I've decided to place it within the source code, instead of skipping it altogether. You can now get back to the book (mainly Chapters 7 and 8) to see how the example can be extended in a number of different ways.
\par }{\fs18\lang3081\cgrid0 
\par }}